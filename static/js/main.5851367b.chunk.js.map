{"version":3,"sources":["images/pkd.jpg","components/SideNavComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","sidebarContainer","width","background","colors","blueGrey","height","avatar","display","margin","spacing","menuItems","listIcon","Home","listText","listPath","Info","AssignmentInd","Apps","ContactMail","SideNav","classes","useState","right","state","setState","menuToggler","slider","open","Box","component","AppBar","position","Toolbar","IconButton","onClick","Menu","style","color","Typography","variant","onClose","className","Avatar","src","profileImg","alt","Divider","List","map","item","key","ListItem","button","ListItemIcon","ListItemText","primary","Main","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,iC,mYCOrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,iBAAkB,CACdC,MAAO,IACPC,WAAYC,IAAOC,SAAS,KAC5BC,OAAQ,QAEZC,OAAQ,CACJC,QAAS,QACTC,OAAQ,cACRP,MAAOF,EAAMU,QAAQ,IACrBJ,OAAQN,EAAMU,QAAQ,SAKxBC,EAAY,CACd,CACIC,SAAU,kBAACC,EAAA,EAAD,MACVC,SAAU,OACVC,SAAU,KAEd,CACIH,SAAU,kBAACI,EAAA,EAAD,MACVF,SAAU,QACVC,SAAU,UAEd,CACIH,SAAU,kBAACK,EAAA,EAAD,MACVH,SAAU,SACVC,SAAU,WAEd,CACIH,SAAU,kBAACM,EAAA,EAAD,MACVJ,SAAU,UACVC,SAAU,YAEd,CACIH,SAAU,kBAACO,EAAA,EAAD,MACVL,SAAU,UACVC,SAAU,aAgDHK,EA5CC,WACZ,IAAMC,EAAUvB,IADE,EAGQwB,mBAAS,CAC/BC,OAAO,IAJO,mBAGXC,EAHW,KAGJC,EAHI,KAMZC,EAAc,SAACC,EAAQC,GAAT,OAAkB,WAClCH,EAAS,2BACFD,GADC,kBACOG,EAASC,OAmB5B,OACI,kBAACC,EAAA,EAAD,CAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAST,EAAY,SAAQ,IACrC,kBAACU,EAAA,EAAD,CAAMC,MAAO,CAACC,MAAO,YAEzB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,8BAEJ,kBAAE,IAAF,CAAcZ,KAAMJ,EAAMD,MAAOkB,QAASf,EAAY,SAAS,IAvBvE,kBAACG,EAAA,EAAD,CAAKC,UAAU,MAAMY,UAAWrB,EAAQpB,kBACpC,kBAAC0C,EAAA,EAAD,CAAQD,UAAWrB,EAAQd,OAAQqC,IAAKC,IAAYC,IAAI,uBACxD,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACKrC,EAAUsC,KAAI,SAACC,EAAMC,GAAP,OACX,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACF,IAAKA,GAClB,kBAACG,EAAA,EAAD,KAAeJ,EAAKtC,UACpB,kBAAC2C,EAAA,EAAD,CAAcC,QAASN,EAAKpC,qBCzDnC2C,EAVJ,WAET,OACE,6BACI,kBAAC,EAAD,Q,SCOKC,MAVf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5851367b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pkd.37a66977.jpg\";","import React, { useState } from 'react'\r\nimport profileImg from '../images/pkd.jpg';\r\nimport { Box, AppBar, Toolbar, IconButton, Typography, Avatar, colors, Divider, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport {Menu, Home, AssignmentInd, Apps, ContactMail, Info } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MobillRight from '@material-ui/core/Drawer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    sidebarContainer: {\r\n        width: 250,\r\n        background: colors.blueGrey[200],\r\n        height: \"100%\"\r\n    },\r\n    avatar: {\r\n        display: \"block\",\r\n        margin: \"0.5rem auto\",\r\n        width: theme.spacing(13),\r\n        height: theme.spacing(13)\r\n    }\r\n\r\n}));\r\n\r\nconst menuItems = [\r\n    {\r\n        listIcon: <Home />,\r\n        listText: 'Home',\r\n        listPath: '/'\r\n    },\r\n    {\r\n        listIcon: <Info />,\r\n        listText: 'About',\r\n        listPath: '/about'\r\n    },\r\n    {\r\n        listIcon: <AssignmentInd />,\r\n        listText: 'Resume',\r\n        listPath: '/resume'\r\n    },\r\n    {\r\n        listIcon: <Apps />,\r\n        listText: 'Project',\r\n        listPath: '/project'\r\n    },\r\n    {\r\n        listIcon: <ContactMail />,\r\n        listText: 'Contact',\r\n        listPath: '/contact'\r\n    }   \r\n]\r\n\r\nconst SideNav = () => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = useState({\r\n        right: false\r\n    })\r\n    const menuToggler = (slider, open) => () => {\r\n        setState({\r\n            ...state, [slider]: open \r\n        })\r\n    }\r\n\r\n    const sidebar = slider => (\r\n        <Box component='div' className={classes.sidebarContainer} >\r\n            <Avatar className={classes.avatar} src={profileImg} alt='Pasan Dewasurendra' />\r\n            <Divider />\r\n            <List>\r\n                {menuItems.map((item, key) => (\r\n                    <ListItem button key={key}>\r\n                        <ListItemIcon>{item.listIcon}</ListItemIcon>\r\n                        <ListItemText primary={item.listText} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </Box>\r\n    )\r\n\r\n    return(\r\n        <Box component=\"nav\" >\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <IconButton onClick={menuToggler(\"right\",true)}>\r\n                        <Menu style={{color: 'white' }} />\r\n                    </IconButton>\r\n                    <Typography variant='h5'>Who is Pasan Dewasurendra</Typography>\r\n                </Toolbar>\r\n                < MobillRight open={state.right} onClose={menuToggler(\"right\", false)}>\r\n                    {sidebar('right')}\r\n                </MobillRight>\r\n            </AppBar>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SideNav;","import React from 'react'\r\nimport SideNav from './SideNavComponent';\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n      <div>\r\n          <SideNav />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Main;","import React from 'react';\nimport Main from './components/MainComponent';\nimport { CssBaseline } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n      <Main />\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}